---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  vpcName:
    Type: String
  domainName:
    Type: String
    Default: dev.gouthamreddy.me
  hostedZoneID:
    Type: String
    Default: Z1CK6U2I6A3F00
  vpcCidr:
    Type: String
  TableName:
    Type: String
    Default: csye6225
  vpcIdUnique:
    Type: String
  DeploymentGroupName:
    Type: String
    Default: csye6225-webapp-deployment
  KeyPair:
    Default: awskeypair
    Type: String
  SSLCertificate:
    Type: String
    Default: arn:aws:acm:us-east-1:120731305361:certificate/e7e8b41e-4080-4c66-b0a1-2fdf0cca6a18
  EC2TagValue:
    Type: String
    Default: csye6225-EC2
  pubSubnet1:
    Type: String
  pubSubnet1CIDR:
    Type: String
  pubSubnet2:
    Type: String
  pubSubnet2CIDR:
    Type: String
  pubSubnet3:
    Type: String
  pubSubnet3CIDR:
    Type: String
  EC2RefTagName:
    Type: String
    Default: Name
  pvtSubnet1:
    Type: String
  pvtSubnet1CIDR:
    Type: String
  pvtSubnet2:
    Type: String
  pvtSubnet2CIDR:
    Type: String
  pvtSubnet3:
    Type: String
  pvtSubnet3CIDR:
    Type: String
  AppName:
    Type: String
    Default: csye6225-webapp
  destinationCidrBlock:
    Type: String
    Default: 0.0.0.0/0
  ImageID:
    Default: ami-01456ab324f7a8c73
    Type: String
  EC2VolumeSize:
    Type: String
  RDSVolumeSize:
    Type: String
  DBUsername:
    Default: admin
    Description: Db Username
    Type: String
  DBPassword:
    Default: test1234
    Description: Db Password
    Type: String
  CodeDeployS3Bucket:
    Type: String
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: vpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            Ref: vpcName
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My Internet Gateway
    DependsOn: MyVpc
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVpc
      InternetGatewayId:
        Ref: MyInternetGateway
    DependsOn: MyVpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVpc
      CidrBlock:
        Ref: pubSubnet1CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Public Subnet 1
    DependsOn: MyVpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVpc
      CidrBlock:
        Ref: pubSubnet2CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Public Subnet 2
    DependsOn: MyVpc
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVpc
      CidrBlock:
        Ref: pubSubnet3CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - '2'
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Public Subnet 3
    DependsOn: MyVpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVpc
      CidrBlock:
        Ref: pvtSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: Private Subnet 1
    DependsOn: MyVpc
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVpc
      CidrBlock:
        Ref: pvtSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: Private Subnet 2
    DependsOn: MyVpc
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVpc
      CidrBlock:
        Ref: pvtSubnet3CIDR
      AvailabilityZone:
        Fn::Select:
          - '2'
          - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: Private Subnet 3
    DependsOn: MyVpc
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpc
      Tags:
        - Key: Name
          Value: Public Route Table
    DependsOn: MyVpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock:
        Ref: destinationCidrBlock
      GatewayId:
        Ref: MyInternetGateway
    DependsOn: AttachGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
    DependsOn: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
    DependsOn: PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet3
    DependsOn: PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpc
      Tags:
        - Key: Name
          Value: Private Route Table
    DependsOn: MyVpc
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
    DependsOn: PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2
    DependsOn: PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet3
    DependsOn: PrivateRouteTable
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80, SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId:
            Ref: loadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId:
            Ref: loadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          SourceSecurityGroupId:
            Ref: loadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: MyVpc
    DependsOn: loadBalancerSecurityGroup
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security tag for db
      GroupName: database
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: WebServerSecurityGroup
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
      VpcId:
        Ref: MyVpc
      Tags:
        - Key: Name
          Value: csye6225-rds
    DependsOn: MyVpc
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      Tags:
        - Key: Name
          Value: Public DB SubnetGroup
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: RDS Parameter Group
      Family: mysql5.7
      Parameters:
        performance_schema: '1'
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: AWS::StackName
                - RDSDBParameterGroup
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: cloud
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: cloud
      AllocatedStorage:
        Ref: RDSVolumeSize
      Engine: MySQL
      EngineVersion: 5.7.25
      MasterUsername:
        Ref: DBUsername
      MasterUserPassword:
        Ref: DBPassword
      MultiAZ: 'false'
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBParameterGroupName:
        Ref: RDSDBParameterGroup
      PubliclyAccessible: 'false'
      StorageEncrypted: true
      StorageType: gp2
      VPCSecurityGroups:
        - Ref: DbSecurityGroup
      Tags:
        - Key: Name
          Value: My SQL Database
    DependsOn: MyVpc
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: CodeDeployEC2ServiceRole
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Prefix: ''
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: "/"
  CodeDeployEC2S3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetAccountPublicAccessBlock
              - s3:ListAllMyBuckets
              - s3:ListJobs
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: CodeDeployS3Bucket
                    - "/*"
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: CodeDeployS3Bucket
  CircleCIUploadToS3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CircleCI-Upload-To-S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:ListBucket
              - s3:Get*
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: CodeDeployS3Bucket
                    - "/*"
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: CodeDeployS3Bucket
      Users:
        - circleci
  CirlceCiCodeDeploy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CirlceCI-Code-Deploy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - codedeploy:RegisterApplicationRevision
              - codedeploy:GetApplicationRevision
            Resource:
              Fn::Join:
                - ":"
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - application:csye6225-webapp
          - Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetDeployment
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - codedeploy:GetDeploymentConfig
            Resource:
              - Fn::Join:
                  - ":"
                  - - arn:aws:codedeploy
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - deploymentconfig
                    - CodeDeployDefault.AllAtOnce
      Users:
        - circleci
  CircleCiEc2Ami:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: circleci-ec2-ami
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CopyImage
              - ec2:CreateImage
              - ec2:CreateKeypair
              - ec2:CreateSecurityGroup
              - ec2:CreateSnapshot
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:DeleteKeyPair
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSnapshot
              - ec2:DeleteVolume
              - ec2:DeregisterImage
              - ec2:DescribeImageAttribute
              - ec2:DescribeImages
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:DescribeRegions
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSnapshots
              - ec2:DescribeSubnets
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DetachVolume
              - ec2:GetPasswordData
              - ec2:ModifyImageAttribute
              - ec2:ModifyInstanceAttribute
              - ec2:ModifySnapshotAttribute
              - ec2:RegisterImage
              - ec2:RunInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
            Resource: "*"
      Users:
        - circleci
  S3BucketAttachmentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:List*
              - s3:Put*
              - s3:Get*
              - s3:Delete*
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: S3Bucket
                    - "*"
      Roles:
        - Ref: CodeDeployEC2ServiceRole
  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: CodeDeployEC2S3
        - Ref: SnsEc2Policy
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      RoleName: CodeDeployEC2ServiceRole
  asgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: ImageID
      KeyName:
        Ref: KeyPair
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: 'true'
            VolumeSize: '20'
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe "
              - sudo su
              - cd /etc/profile.d
              - touch envars.sh
              - Fn::Join:
                  - ''
                  - - echo export dburl=
                    - Fn::GetAtt:
                        - RDSInstance
                        - Endpoint.Address
                    - ">> /etc/profile.d/envars.sh\n"
              - Fn::Join:
                  - ''
                  - - echo export springprofilesactive=aws >> /etc/profile.d/envars.sh
              - Fn::Join:
                  - ''
                  - - echo export springdatasourceusername=
                    - Ref: DBUsername
                    - ">> /etc/profile.d/envars.sh"
              - Fn::Join:
                  - ''
                  - - echo export springdatasourcepassword=
                    - Ref: DBPassword
                    - ">> /etc/profile.d/envars.sh"
              - Fn::Join:
                  - ''
                  - - echo export bucketname=
                    - Ref: S3Bucket
                    - ">> /etc/profile.d/envars.sh"
              - sudo chmod 777 /etc/profile.d/envars.sh
              - source /etc/profile.d/envars.sh
              - systemctl enable tomcat.service
              - systemctl start tomcat.service
      LaunchConfigurationName: asgLaunchConfig
      AssociatePublicIpAddress: true
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      SecurityGroups:
        - Ref: loadBalancerSecurityGroup
      Subnets:
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
      Name: ApplicationLoadBalancer
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: Loadbalancer
      Type: application
  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80, SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: MyVpc
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: '8081'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 3
      Name: ALBTargetGroup
      Port: 8081
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: MyVpc
      Matcher:
        HttpCode: '401'
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerGroup
      Cooldown: '60'
      LaunchConfigurationName:
        Ref: asgLaunchConfig
      MaxSize: '10'
      MinSize: '3'
      DesiredCapacity: '3'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 60
      Tags:
        - Key:
            Ref: EC2RefTagName
          Value:
            Ref: EC2TagValue
          PropagateAtLaunch: true
      TargetGroupARNs:
        - Ref: ALBTargetGroup
      VPCZoneIdentifier:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 10% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '85'
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold
      Unit: Percent
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 5% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '5'
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold
      Unit: Percent
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server
      ApplicationName:
        Ref: AppName
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: AppName
      DeploymentGroupName:
        Ref: DeploymentGroupName
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoScalingGroups:
        - Ref: WebServerGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name:
              Fn::GetAtt:
                - ALBTargetGroup
                - TargetGroupName
      ServiceRoleArn:
        Fn::GetAtt:
          - CodeDeployServiceRole
          - Arn
      Ec2TagFilters:
        - Key:
            Ref: EC2RefTagName
          Value:
            Ref: EC2TagValue
          Type: KEY_AND_VALUE
  DNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name:
        Ref: domainName
      HostedZoneId:
        Ref: hostedZoneID
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - DNSName
      Type: A
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: SSLCertificate
  CircleCIUpdateLambda:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:UpdateFunctionCode
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:lambda:us-east-1:'
                    - Ref: AWS::AccountId
                    - ":function:EmailLambda"
      PolicyName: Circle-CI-Update-Lambda-Function
      Users:
        - circleci
  EmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EmailLambda
      Handler: EmailLambda::handleRequest
      Role:
        Fn::GetAtt:
          - EmailLambdaRole
          - Arn
      Code:
        S3Bucket:
          Ref: CodeDeployS3Bucket
        S3Key: EmailLambda.jar
      Environment:
        Variables:
          DynamoDBEndPoint: dynamodb.us-east-1.amazonaws.com
          ttlInMin: '60'
          domain:
            Ref: domainName
      Runtime: java11
      ReservedConcurrentExecutions: 5
      MemorySize: 256
      Timeout: '900'
  EmailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EmailLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - Ref: LambdaDynamoDBSesAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  EmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: EmailLambda
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: BillDue
  LambdaDynamoDBSesAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: lambda-dynamoDB-ses-accessPolicy
      Description: Policy for lambda to access dynamoDB and ec2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:Query
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":table/"
                    - Ref: TableName
          - Action: ses:SendEmail
            Effect: Allow
            Resource: "*"
  BillDue:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - EmailLambda
              - Arn
          Protocol: lambda
      TopicName: bill_due_topic
  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:DeleteTopic
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:Receive
              - SNS:AddPermission
              - SNS:Subscribe
            Resource:
              Ref: BillDue
            Condition:
              StringEquals:
                AWS:SourceOwner:
                  Ref: AWS::AccountId
      Topics:
        - Ref: BillDue
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: ttlInMin
        Enabled: true
      TableName: csye6225
  SnsEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: sns-ec2-policy
      Description: Policy for ec2 to access sns
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sns:Publish
              - sns:CreateTopic
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:sns:'
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":bill_due_topic"
  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: BillQueue
Outputs:
  VPC:
    Description: VPC ID for EC2 instance
    Value:
      Ref: MyVpc
    Export:
      Name:
        Ref: vpcName
  PublicSubnet1:
    Description: The subnet ID to use for public web servers
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Ref: pubSubnet1
  PublicSubnet2:
    Description: subnet ID  public web app
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Ref: pubSubnet2
  PublicSubnet3:
    Description: The subnet ID to use for public web servers
    Value:
      Ref: PublicSubnet3
    Export:
      Name:
        Ref: pubSubnet3
  PrivateSubnet1:
    Description: The private subnet ID to use for RDS
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Ref: pvtSubnet1
  PrivateSubnet2:
    Description: private subnet ID for RDS
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Ref: pvtSubnet2
  PrivateSubnet3:
    Description: The private subnet ID to use for RDS
    Value:
      Ref: PrivateSubnet3
    Export:
      Name:
        Ref: pvtSubnet3
  loadBalancer:
    Description: Application LoadBalancer
    Value:
      Ref: ApplicationLoadBalancer
    Export:
      Name: csye6225-load-balancer
  RDSInstance:
    Description: " RDS instance  attachments"
    Value:
      Ref: RDSInstance
    Export:
      Name: RDSInstance
  S3Bucket:
    Description: The S3 bucket for file attachments
    Value:
      Ref: S3Bucket
    Export:
      Name: S3Bucket
  QueueURL:
    Description: URL of new Amazon SQS Queue
    Value:
      Ref: MySQSQueue
  QueueARN:
    Description: ARN of new Amazon SQS Queue
    Value:
      Fn::GetAtt:
        - MySQSQueue
        - Arn
  QueueName:
    Description: Name new Amazon SQS Queue
    Value:
      Fn::GetAtt:
        - MySQSQueue
        - QueueName
